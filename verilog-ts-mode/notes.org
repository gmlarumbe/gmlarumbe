* Tree-sitter dev
** Pending
** Implemented
*** DONE verilog-ext beautify, navigation and which func implementations
CLOSED: [2024-09-12 Thu 18:44]
- Beautify already exist in verilog-ts-mode, move them to verilog-ext
- Currently they rely on verilog-mode regexp parsing
- Move all navigation functions to verilog-ext and implement them there
  - Add tests for all of these (loading verilog-ts-mode)
- Do the same with which-function

*** DONE Tests refactoring
*** DONE Check treesit-language-source-alist an treesit-install-language-grammar:
CLOSED: [2023-09-11 Mon 19:19]
- For automatic install of the forked Verilog grammar
- Check also the deno-ts-mode documentation for an example
- Try to apply the same to to VHDL mode

*** xref
- [X] Implement tags/refs gathering in workspace
  - `verilog-ext-workspace-get-tags points' to `verilog-ext-workspace-get-tags'
  - [X] Implement equivalent of verilog-ext-tags-get-definitions for tree-sitter
  - [X] Implement equivalent of verilog-ext-tags-get-references for tree-sitter
  - Beware the macros
*** capf
- [X] Implement verilog-ext-workspace-capf in workspace for tree-sitter
  - Requires implementation of verilog-ext-tags-get-definitions/verilog-ext-tags-get-references
  - [X] Should be possible to have more information about what is being auto-completed from the context
    - e.g.: for dot completion, if it's a hierarchical reference, or a class attribute/method
- [ ] Include verilog-keywords?
  - (no need to include in company-keywords)

#+begin_src elisp
;;; Tags
;; TODO: WIP. Might have already been implemented in verilog-ext?
(defconst verilog-ts-declaration-re
  (regexp-opt
   '("module_declaration"
     "interface_declaration"
     "program_declaration"
     "package_declaration"
     "function_declaration"
     "task_declaration"
     "ansi_port_declaration"
     "local_parameter_declaration"
     "data_declaration"
     )))

;; TODO:
;; Steps:
;;  1- Prune tree, if needed, with the treesit-induce-sparse-tree
;;  2- Get nodes from `verilog-ts-declaration-re'
;;  3- For each of these nodes, with mapcar, add something similar to `verilog-ext-tags-table-add-entry'
;;  4- Think how to implement the :parents thing, if with mapcan similar to imenu or non-recursively, with more queries
;;  5- Iterate over all the files
(defun verilog-ts-tags-get-definitions ()
  ""
  ()
  )
#+end_src

*** navigation
- [ ] Finish implementing, test, check ideas, refactor code
- [ ] verilog-ts-find-function-task-class-fwd does not work as expected:
  - Run here: /home/gonz/.emacs.d/straight/repos/verilog-ext/test/files/common/uvm_component.svh:45
  - It ignores the class
- [ ] verilog-ts-goto-begin-up
     #+begin_src elisp
   ;; TODO: Do something for when point is in "begin", like (string=
   ;; (verilog-ts--node-at-point) "begin"), then move back point if its not
   ;; beginning of buffer to search for new node!
   ;; Basically Avoid getting stuck!!
     #+end_src
- [ ] verilog-ts-goto-begin-down
    #+begin_src elisp
      ;; TODO: Doesn't work. Don't know how to make it work.
      ;; `verilog-ts--node-has-child-recursive' doesn't find anything on current node
      ;; Also tried with: (treesit-search-subtree (verilog-ts--node-at-point) "seq_block") but no results
      ;; @ /home/gonz/.emacs.d/straight/repos/verilog-ext/test/files/common/uvm_component.svh:1503
    #+end_src
- [ ] verilog-ts-defun-level-down
  - Not sure how to implement it
- [ ] next and prev dwim
  #+begin_src elisp
    ;; TODO: Reformulate these. See if something better can be done, something more useful
    (defun verilog-ts-nav-next-dwim ()
      "Context based search next.
    If in a parenthesis, go to closing parenthesis (Elisp like).
    Otherwise move to next paragraph."
      (interactive)
      )

    (defun verilog-ts-nav-prev-dwim ()
      "Context based search previous.
    If in a parenthesis, go to opening parenthesis (Elisp like).
    Otherwise move to previous paragraph."
      (interactive)
      )
  #+end_src

*** beautify
- [ ] What about the equivalents of verilog-pretty-declarations and verilog-pretty-expressions?
  - [ ] Finish implementation so that all tests are passing
  - [ ] Add new tests with new options
- [ ] Prettify:
  - verilog-ts-pretty-declarations:
    #+begin_src elisp
  ;; TODO: Implement for port declarations, localparams?
  ;; TODO: Implement if region is active
  ;; TODO: Implement tests!
    #+end_src
  - verilog-ts-pretty-expr
  #+begin_src elisp
    ;; TODO: Beware that nonblocking_assignment has no node that points to the operator (only re "<=")
    ;; unlike blocking_assignments, that have "assignment_operator", which is "=" and can be queried!
    ;; TODO: Implement if region is active
    ;; TODO: Implement tests!
  #+end_src
- [ ] Beautify:
  - Check the TODO in `verilog-ts-beautify-current-buffer'
  #+begin_src elisp
(defun verilog-ts-beautify-current-buffer ()
  "Beautify current buffer:
- Indent whole buffer
- Beautify every instantiated module
- Untabify and delete trailing whitespace"
  (interactive)
  (let (node)
    (indent-region (point-min) (point-max))
    (save-excursion
      (goto-char (point-min))
      (while (setq node (treesit-search-forward (verilog-ts--node-at-point) "\\(module\\|interface\\)_instantiation"))
        (goto-char (treesit-node-start node))
        (verilog-ts-beautify-block-at-point)
        ;; TODO: Seems a bit redundant/inefficient. Probably there's a better way to do it
        ;; However, it's needed to avoid and outdated node error after beautifying
        (setq node (treesit-search-forward (verilog-ts--node-at-point) "\\(module\\|interface\\)_instantiation"))
        (goto-char (treesit-node-end node))
        (when (not (eobp))
          (forward-char))))
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace (point-min) (point-max))))
  #+end_src

*** imenu
- Work in progress, inside verilog-ts-mode
- [ ] /home/gonz/.emacs.d/straight/repos/verilog-ext/test/files/common/uvm_component.svh:1416
  - Doesnt detect well typedefs

*** which-func
- Work in progress, inside verilog-ts-mode

*** font-lock
- Long work in progress
**** TODO How to implement translate off in italic?
;; Fontifying in blocks is bound to start/end of the block in tree-sitter parsed tree.
;; That means that two (comment) blocks would need to be found, parsed, and one of them
;; should contain "synthesis_translate off" and the other "synthesis_translate on".
;; Since this seems very complex for tree-sitter, the other option could be just analyzing
;; the whole buffer and run something like `treesit-fontify-with-override', but this doesn't
;; seem to work. It adds text properties to text, but not sure about how to refresh it.

*** hierarchy
- Implemented

*** hideshow
- It's regexp based, so leave it in verilog-ext

*** Utils
- [ ] verilog-ts--node-identifier-name
  - TODO: Might not work for some cases: e.g: @ test/files/common/uvm_component.svh:1498

*** Indentation
     ;; Opening. TODO: I think these are never hit?
     ((or (node-is "{")
          (node-is "("))
      parent-bol 0)

